<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


	<context:component-scan base-package="com.kosmo.**" use-default-filters="false">
	<context:include-filter expression="org.springframework.stereotype.Service" type="annotation" />
	<context:include-filter expression="org.springframework.stereotype.Repository" type="annotation" />
	</context:component-scan>


	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http pattern="/images/*" security="none"/>

    <http auto-config="true"  use-expressions="true">
    	<!-- use-expressions=false : SpEL사용x
    	<intercept-url pattern="/login" 		access="ROLE_ANONYMOUS" />
    	<intercept-url pattern="/resources/**" 	access="ROLE_ANONYMOUS" />
    	<intercept-url pattern="/logout" 		access="ROLE_ANONYMOUS" />
    	<intercept-url pattern="/accessdenied" 	access="ROLE_ANONYMOUS" />
        <intercept-url pattern="/admin" 		access="ROLE_ADMIN" />
        <intercept-url pattern="/user" 			access="ROLE_USER" />
  		<intercept-url pattern="/**" 			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		-->

    	<!-- use-expressions=true : SpEL사용 -->
    	<!-- 접근권한설정 -->
        <!-- <intercept-url pattern="/board" 			access="hasRole('ROLE_ANONYMOUS')" /> -->

        <intercept-url pattern="/resources/**" 		access="permitAll" />
        <intercept-url pattern="/member/loginPage" 	access="permitAll" />
        <intercept-url pattern="/member/denied" 	access="permitAll" />
        <intercept-url pattern="/member/logout" 	access="permitAll" />
        <intercept-url pattern="/member/map" 		access="hasRole('ROLE_ADMIN')" />
        <!-- 
        <intercept-url pattern="/member/**" 		access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/user/**" 			access="hasRole('ROLE_USER')" /> 
        -->
        <intercept-url pattern="/**" 				access="permitAll" />

		<access-denied-handler error-page="/member/denied" />

        <!-- 로그인폼 &로그인 :  j_spring_security_login -->
        <form-login
        		login-processing-url="/auth"
	        	username-parameter="mid"
				password-parameter="mpw"
        		login-page="/member/loginPage"
	        	default-target-url="/member/user_main"
				authentication-failure-url="/member/loginPage?error"
				always-use-default-target='true' />
				<!-- 
				인증 성공/실패 처리를 위한 핸들러 
				authentication-success-handler-ref="authSuccessHandler"
				authentication-failure-handler-ref="authFailureHandler"
				 -->
		<!-- 중복 로그인 설정 : 중복 로그인 시, 먼저 로그인한 세션 삭제
		<session-management>
			<concurrency-control max-sessions="2"  expired-url="/member/denied" />
		</session-management>
		-->

        <!-- 로그아웃:  j_spring_security_logout -->
        <logout invalidate-session="true"
        		logout-url="/member/logout"
        		delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"	  
        		logout-success-url="/member/loginPage?logout" />

        <!-- CSRF 공격방지 -->
		<csrf/>
		
		<!-- 세션 체크
		<session-management invalid-session-url="/member/denied" />
		-->
		
		<!--  Remember Me Expired  : 4주
		<remember-me key="myStringKey" token-validity-seconds="2419200"/> 
		-->
    </http>


	<!-- password가 일치되는 경우 -->
	<!-- <beans:bean id="authSuccessHandler" class="com.kosmo.member.CustomAuthenticationFailureHandler">
		<beans:property name="successURL" value="/member/user_main" />
	</beans:bean> -->
	<!-- password가 일치되는 않는 경우 -->
	<!-- <beans:bean id="authFailureHandler" class="com.kosmo.member.CustomAuthenticationFailureHandler">
		<beans:property name="failureURL" value="/member/loginPage?error" />
	</beans:bean>
 	-->

	<!-- 방법1. 인증 처리 : 하드코딩
    <authentication-manager>
		<authentication-provider>
			<password-encoder hash="sha"/>
		    <user-service>
				<user name="lkh" password="d7e6351eaa13189a5a3641bab846c8e8c69ba39f" authorities="ROLE_USER, ROLE_ADMIN" />
				<user name="user" password="111" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
	 -->

	<!-- 방법2. 인증 처리 : 서비스 사용 -->
	<beans:bean id="myEncoder"  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    <beans:bean id="shaEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	<beans:bean id="customDetailService" class="com.kosmo.member.CustomUserDetailsService" />

    <authentication-manager>
		<authentication-provider user-service-ref="customDetailService">
	<!-- 		<password-encoder ref="shaEncoder" /> -->
		</authentication-provider>
    </authentication-manager>


	<!-- 방법3. 인증 처리 : 프로바이더 사용
    <beans:bean id="authProvider" class="com.kosmo.member.CustomAuthenticationProvider" />
	<authentication-manager alias="authenticationManager">
	    <authentication-provider ref="authProvider"/>
	</authentication-manager>
	-->

	<!-- 방법3. 인증 처리 : 프로바이더 사용 (암호화)
    <beans:bean id="authProvider" class="com.kosmo.auth.CustomAuthenticationProvider">
        <beans:property name="shaEncoder" ref="shaEncoder" />
    </beans:bean>
	<authentication-manager>
	    <authentication-provider ref="authProvider"/>
	</authentication-manager>
	-->
	
	<!-- 방법4. 인증 처리 : JDBC 서비스 사용
	<authentication-manager alias="authenticationManager">
	    <authentication-provider>
	        <jdbc-user-service data-source-ref="kosmoDS"
			       users-by-username-query="
				         SELECT USERNAME, PASSWORD, decode(ENABLED, 1 , true, false) as ENABLED
				         FROM TBL_USERS
				         WHERE USERNAME=?;"
			       authorities-by-username-query="
				        SELECT u.USERNAME, r.ROLENAME
				        FROM TBL_USERS u, TBL_USER_ROLE r
				        WHERE u.ID = r.USERID
				        AND u.USERNAME=?;" 
	        />
	    </authentication-provider>
	</authentication-manager>
	-->
	<!-- 
	CREATE TABLE tbl_users (
	  id number primary key,
	  username varchar2(100) NOT NULL,
	  password varchar2(20) NOT NULL,
	  enabled int(1) NOT NULL
	); 
	CREATE TABLE tbl_user_role (
	  userid number NOT NULL,
	  rolename varchar2(100) NOT NULL
	);
	 -->
	
</beans:beans>
